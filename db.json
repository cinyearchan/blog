{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/fexo/source/css/styles.css","path":"css/styles.css","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.eot","path":"fonts/PoiretOne-Regular.eot","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.ttf","path":"fonts/PoiretOne-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.woff","path":"fonts/PoiretOne-Regular.woff","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.eot","path":"fonts/calligraffitti-regular-webfont.eot","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff2","path":"fonts/calligraffitti-regular-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff","path":"fonts/calligraffitti-regular-webfont.woff","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.eot","path":"fonts/fontello.eot","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.ttf","path":"fonts/fontello.ttf","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.svg","path":"fonts/fontello.svg","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.woff","path":"fonts/fontello.woff","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.woff2","path":"fonts/fontello.woff2","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/bundle.js","path":"js/bundle.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/fastclick.js","path":"js/fastclick.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/scroll-spy.js","path":"js/scroll-spy.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/util.js","path":"js/util.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/zenscroll.js","path":"js/zenscroll.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/css/styles.css.map","path":"css/styles.css.map","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.ttf","path":"fonts/calligraffitti-regular-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/fexo/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.svg","path":"fonts/PoiretOne-Regular.svg","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.svg","path":"fonts/calligraffitti-regular-webfont.svg","modified":0,"renderable":1},{"_id":"themes/fexo/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.eot","path":"fonts/Lobster-Regular.eot","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.ttf","path":"fonts/Lobster-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.woff","path":"fonts/Lobster-Regular.woff","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.svg","path":"fonts/Lobster-Regular.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/fexo/.gitignore","hash":"32223fbe296f8e3026c689bad8f3dea9d0fcbb43","modified":1527515949525},{"_id":"themes/fexo/LICENSE","hash":"db4cb5aef6072a96721b5428fdd999647c049d55","modified":1527515949525},{"_id":"themes/fexo/README.md","hash":"35cd346c229e17ed83609ee94b5d6493c4ab9982","modified":1527515949525},{"_id":"themes/fexo/_config.yml","hash":"be48d59eec1a26a60d798c29ce2ee724117efd77","modified":1527612482964},{"_id":"themes/fexo/gulpfile.js","hash":"5995b9c4e8e18d1670ad30b2881d49fa17e56415","modified":1527515949526},{"_id":"themes/fexo/.csscomb.json","hash":"0bff596879c2556634b9a92abe5b1606dc77fd1c","modified":1527515949524},{"_id":"themes/fexo/package.json","hash":"38850a4aa4a01c697bdf2bed87709fe0c8c3fe69","modified":1527515949545},{"_id":"source/_posts/译-Tasks-microtasks-queues-and-schedules.md","hash":"eda5cb8559f5512de53f53350990093ef5967b51","modified":1530801039682},{"_id":"themes/fexo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527515949514},{"_id":"themes/fexo/.git/config","hash":"a04997723156ad92acd37b6b1249f76028b9aa2d","modified":1527515949517},{"_id":"source/_posts/hello-world.md","hash":"1f678e6d6738302146d6779ba56b38481ef2bb5e","modified":1530455350753},{"_id":"source/_posts/.DS_Store","hash":"4aa952c73d8dd8f363d6e15a716613362660ab76","modified":1528294018396},{"_id":"source/_posts/译-通过从头实现一个promise来学习promise.md","hash":"6a283c3716ca70d374f15e5a2fa5b2913e1c851f","modified":1528298393713},{"_id":"themes/fexo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527515866765},{"_id":"themes/fexo/.git/index","hash":"430e015d42438af9b11995ada58b1515c329e4d9","modified":1528299069101},{"_id":"themes/fexo/.git/packed-refs","hash":"e60e09c9e808d873c989a4576d804f0fe946859c","modified":1527515949511},{"_id":"themes/fexo/languages/default.yml","hash":"1a6762d52295b0f7586f40c35e713c0fd33c2a2b","modified":1527515949526},{"_id":"themes/fexo/languages/en.yml","hash":"b58364c7dfac61eddd64510f74ca7516da48f0cf","modified":1527515949526},{"_id":"themes/fexo/languages/no.yml","hash":"bf11017d77f64fbafb9c99ac219d076b20d53afc","modified":1527515949526},{"_id":"themes/fexo/languages/zh-TW.yml","hash":"6141b4c7a094c74bd9df7c08908d92b561c1a0c0","modified":1527515949527},{"_id":"themes/fexo/languages/zh-CN.yml","hash":"1a6762d52295b0f7586f40c35e713c0fd33c2a2b","modified":1527515949527},{"_id":"themes/fexo/layout/category.ejs","hash":"e8c8209f74ac0c96c29dbdff38d0f43664417342","modified":1527515949540},{"_id":"themes/fexo/layout/archive.ejs","hash":"9c22251c328e937c444a9f5d4b324f97a78d324f","modified":1527515949540},{"_id":"themes/fexo/layout/about.ejs","hash":"f1f06842f3fac2c7dd74811722431c5720e6cf8d","modified":1527515949540},{"_id":"themes/fexo/layout/layout.ejs","hash":"ae485be0f6c0c431245e0cac21dc109c9d0125e8","modified":1527515949541},{"_id":"themes/fexo/layout/link.ejs","hash":"0144bdb1bc5f19763535b79b3302bf85bc0afbff","modified":1527515949541},{"_id":"themes/fexo/layout/post.ejs","hash":"8cf15be489f8f3c11ac0215c16cbce36c854555f","modified":1527515949542},{"_id":"themes/fexo/layout/project.ejs","hash":"ea63f5ffda0d260b5dc2c2e852caddd082e37efa","modified":1527515949542},{"_id":"themes/fexo/layout/search.ejs","hash":"8c6fc59bed1facf14dd6a48bdf8dd44452583f4d","modified":1527515949543},{"_id":"themes/fexo/layout/tag.ejs","hash":"ea8f39f11e6f8750edbf4130abf26168a403b1b4","modified":1527515949543},{"_id":"themes/fexo/layout/index.ejs","hash":"9d33cd03e7a8adf8bbc124c248def36c15e681d0","modified":1527515949541},{"_id":"themes/fexo/package-lock.json","hash":"96cbc6874ae373b7ebd91a8b2a5166e7502514fa","modified":1527515949544},{"_id":"themes/fexo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1527515866765},{"_id":"themes/fexo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1527515866766},{"_id":"themes/fexo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1527515866765},{"_id":"themes/fexo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1527515866766},{"_id":"themes/fexo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1527515866766},{"_id":"themes/fexo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1527515866765},{"_id":"themes/fexo/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1527515866765},{"_id":"themes/fexo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1527515866766},{"_id":"themes/fexo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1527515866766},{"_id":"themes/fexo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1527515866766},{"_id":"themes/fexo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1527515866764},{"_id":"themes/fexo/.git/logs/HEAD","hash":"5450348cbbe638b6d3920cf2b40fb91c3e5635bc","modified":1527515949515},{"_id":"themes/fexo/layout/_partial/article.ejs","hash":"745f11c21dcf5d01f4aad3818777fc62e45d2f84","modified":1527515949527},{"_id":"themes/fexo/layout/_partial/baidu-analytics.ejs","hash":"c19e4abec19c23840fff7f8a51f4aefbb2b7e8ca","modified":1527515949528},{"_id":"themes/fexo/layout/_partial/baidu-push.ejs","hash":"6950255d74efac8811d5b05d0d7a263c3c96486d","modified":1527515949528},{"_id":"themes/fexo/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1527515949538},{"_id":"themes/fexo/layout/_partial/head.ejs","hash":"794916e761ea82fb606a2173af68e9bf524f6efb","modified":1527515949539},{"_id":"themes/fexo/layout/_partial/home.ejs","hash":"225b8a001c7aace46f2b39676e968e7cba9a4277","modified":1527515949539},{"_id":"themes/fexo/layout/_partial/load-script.ejs","hash":"4675c917548817118f4a3c5d84acc98d6c61a1d8","modified":1527515949539},{"_id":"themes/fexo/layout/_partial/style.ejs","hash":"d1e80d7cf8b22929f5c6d8590eac38b069ea055d","modified":1527515949539},{"_id":"themes/fexo/source/css/styles.css","hash":"edda7b8f56586203f06fb0fb1cce0f6707a7f234","modified":1527515949546},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.eot","hash":"2a4ef0d00fb77d16e37c3da429698b029e7d2d2f","modified":1527515949567},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.ttf","hash":"2b186ce205301f7f3abd441f0372b72adcd2aee3","modified":1527515949570},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.woff","hash":"1cebcedde2c52261591bc322b176638798336a24","modified":1527515949571},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.eot","hash":"4c7bcece73621f648fa71d58fa13c28670fed8ca","modified":1527515949572},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff2","hash":"ba50c427166090361b0dab4c72136c7b451e86d4","modified":1527515949576},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff","hash":"1364845a3815740c572e29c83fd8d54f1c1ef5de","modified":1527515949575},{"_id":"themes/fexo/source/fonts/fontello.eot","hash":"7732065eeaec4614e9548955d9bd30ccd7b149c1","modified":1527515949576},{"_id":"themes/fexo/source/fonts/fontello.ttf","hash":"e255d37ca14348e9a8532667a757ab552e58caff","modified":1527515949578},{"_id":"themes/fexo/source/fonts/fontello.svg","hash":"33a984f4482a5ba5e7bc67d82e8db63cda4e3ae1","modified":1527515949577},{"_id":"themes/fexo/source/fonts/fontello.woff","hash":"45737fea847f3942ef405f00ea4df940fbb6bbd9","modified":1527515949579},{"_id":"themes/fexo/source/fonts/fontello.woff2","hash":"1dfbc23328582f7cd9bcbe538224f6c762023e43","modified":1527515949579},{"_id":"themes/fexo/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1527604831226},{"_id":"themes/fexo/source/js/app.js","hash":"a6d6e7fba3d69d0dec2c4d18debe0dc4cc7ab319","modified":1527515949580},{"_id":"themes/fexo/source/js/bundle.js","hash":"fe2b6d4fbc32c78cd9868fb3b75ad71cf5250f24","modified":1527515949581},{"_id":"themes/fexo/source/js/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1527515949582},{"_id":"themes/fexo/source/js/scroll-spy.js","hash":"81b81362fcd63592045a673b54ce1edb7a6e3028","modified":1527515949582},{"_id":"themes/fexo/source/js/util.js","hash":"8136da2bec1faf5fe3e14fa436f501292fca8c07","modified":1527515949583},{"_id":"themes/fexo/source/js/zenscroll.js","hash":"bea2a3571555fdae64e8fc56f161f9a4f427b335","modified":1527515949583},{"_id":"themes/fexo/source/sass/_base.scss","hash":"83f01dbe82e47ce781c6e7eb8a793d95d97e168b","modified":1527515949584},{"_id":"themes/fexo/source/sass/_animate.scss","hash":"8de97c948cb4b9c9b7a87c0f7332ed534c378e26","modified":1527515949584},{"_id":"themes/fexo/source/sass/_fontello.scss","hash":"f2d6b86bb63459884cf63e8c045fd10c827396eb","modified":1527515949585},{"_id":"themes/fexo/source/sass/_common.scss","hash":"b1fc97d6d24a92a9a7a9d39be4fe844f5c0f6d44","modified":1527515949585},{"_id":"themes/fexo/source/sass/_highlight-js.scss","hash":"38a5c4d9f3a2943aff9bde1d624d710587e3bc05","modified":1527515949586},{"_id":"themes/fexo/source/sass/_fonts.scss","hash":"10e188d379782ae2ee10427544919557036d0137","modified":1527515949585},{"_id":"themes/fexo/source/sass/_styles.scss","hash":"86ebe05d6a2931dd6fceef1e50c31ca996dc20be","modified":1527515949587},{"_id":"themes/fexo/source/sass/_variable.scss","hash":"7b05581ef035a88bd1191914ff992103c7812bdf","modified":1527515949588},{"_id":"themes/fexo/source/sass/_type.scss","hash":"cc7a25654593030f5214d5adf85f12a954c373c5","modified":1527515949587},{"_id":"themes/fexo/source/sass/_normalize.scss","hash":"e58275a588bb631a37a2988145eea231ed23176b","modified":1527515949586},{"_id":"themes/fexo/source/css/styles.css.map","hash":"dd689c0ab08f3e7923ede7fab9a193c63f253d90","modified":1527515949547},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.ttf","hash":"4688935c427ae40dcbf16523bc11d9fc10e359b5","modified":1527515949574},{"_id":"themes/fexo/source/favicon.ico","hash":"75ee5e32efbfb204e720b03003bee8552b85c43f","modified":1519665544098},{"_id":"themes/fexo/source/sass/pages/_tag.scss","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527515949596},{"_id":"themes/fexo/.git/refs/heads/master","hash":"834e14ffb65857cd32c5784ce5214e923e1583cc","modified":1527515949515},{"_id":"themes/fexo/layout/_partial/component/back-top.ejs","hash":"47f2b8306b901f0fffc6aa0cfa40db697a0c5aff","modified":1527515949528},{"_id":"themes/fexo/layout/_partial/component/category-box.ejs","hash":"f18e08e5c8718d5cd6672fc01e25ba457db0a385","modified":1527515949529},{"_id":"themes/fexo/layout/_partial/component/category.ejs","hash":"2429158ff177b8876de765498b54d0c91b3fc551","modified":1527515949529},{"_id":"themes/fexo/layout/_partial/component/changyan.ejs","hash":"a5f39aa1ee2f213324889ba05b5f99eaabf13fc9","modified":1527515949529},{"_id":"themes/fexo/layout/_partial/component/comments.ejs","hash":"8d719cdeeda9d5ab5fbfb5f302fc6edd5bb684b8","modified":1527515949529},{"_id":"themes/fexo/layout/_partial/component/donation.ejs","hash":"d5b7f72e008d764f5b5fb13ba6ac7adb8bc0a3e8","modified":1527515949530},{"_id":"themes/fexo/layout/_partial/component/date.ejs","hash":"163fbd874481cb9e2b6da5282701a3fbaa4e367a","modified":1527515949530},{"_id":"themes/fexo/layout/_partial/component/disqus.ejs","hash":"21de7498d235a52337335108fce7446e1a21ea1c","modified":1527515949530},{"_id":"themes/fexo/layout/_partial/component/gitalk.ejs","hash":"37ccc1b114d6fc83c1d47fe7b931d42899f7325f","modified":1527515949531},{"_id":"themes/fexo/layout/_partial/component/gentie.ejs","hash":"9b78a138fb93a71b481ab25c8dea2e082e5e9d6c","modified":1527515949531},{"_id":"themes/fexo/layout/_partial/component/hypercomments.ejs","hash":"321339582edb1dd9c4e4ca13108fe494d08494fc","modified":1527515949532},{"_id":"themes/fexo/layout/_partial/component/gitment.ejs","hash":"cf48268f8b8b0f5a5de6c3d4cf0def9917d5f32d","modified":1527515949531},{"_id":"themes/fexo/layout/_partial/component/item-post.ejs","hash":"722e5dbde2d4683eea08f2af922358db45b253b1","modified":1527515949533},{"_id":"themes/fexo/layout/_partial/component/item-year.ejs","hash":"906a6aea44a30e83c4c4e449294c7e4d831c188e","modified":1527515949533},{"_id":"themes/fexo/layout/_partial/component/modal.ejs","hash":"8edceb2fd6c770691bd5cf4a35236c1def8410fe","modified":1527515949533},{"_id":"themes/fexo/layout/_partial/component/item-tag.ejs","hash":"1b4c4e090c33ccfd44b531a5de9af16eec266512","modified":1527515949533},{"_id":"themes/fexo/layout/_partial/component/pagination.ejs","hash":"ffbb548aee6e15cae924ee7f922f28b2403e8e45","modified":1527515949534},{"_id":"themes/fexo/layout/_partial/component/prev-net.ejs","hash":"d1cb2e61814bcbd25ccb1628f99b18316e029892","modified":1527515949534},{"_id":"themes/fexo/layout/_partial/component/page-header.ejs","hash":"14bad32082d87d7eeb45c0e9079e72f0ae65dbf4","modified":1527515949534},{"_id":"themes/fexo/layout/_partial/component/tag-box.ejs","hash":"d648ea91ec9dc72bca80d70fbb66f7655bd0ea12","modified":1527515949535},{"_id":"themes/fexo/layout/_partial/component/tag-list.ejs","hash":"8535c40b573744ced738b051383c0feca80eb0e9","modified":1527515949535},{"_id":"themes/fexo/layout/_partial/component/title.ejs","hash":"e2fcdd904123186648513cfca4c7ad04921d2d57","modified":1527515949536},{"_id":"themes/fexo/layout/_partial/component/toc.ejs","hash":"000be428e925f5595af29eeba37ba6111f7f6511","modified":1527515949536},{"_id":"themes/fexo/layout/_partial/component/toolbox.ejs","hash":"fcfcccc5b231c4050f1a665b70f7738f9d070541","modified":1527515949537},{"_id":"themes/fexo/layout/_partial/component/uyan.ejs","hash":"afe757c6f45d24640b22d90db6f2799000c6f994","modified":1527515949537},{"_id":"themes/fexo/layout/_partial/component/item-category-name.ejs","hash":"8ab52c9b5d5db1d3c1d343ecb405c4e15cd144ac","modified":1527515949532},{"_id":"themes/fexo/layout/_partial/component/valine.ejs","hash":"3cbf565937f31001c901e451677e7adbe228bfe6","modified":1527515949538},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.svg","hash":"e21109783f218cb7849b12e867e0b775ce3fadda","modified":1527515949569},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.svg","hash":"76e1e4cee6f2b5d596c635631938ee5eb6ab3e67","modified":1527515949573},{"_id":"themes/fexo/source/sass/pages/_about.scss","hash":"7d61e627ea5376390081e0b93db426ffc6c4dee8","modified":1527515949594},{"_id":"themes/fexo/source/sass/pages/_category.scss","hash":"713242d10c0c8687c9e2f287f1beeb38de6cdbad","modified":1527515949595},{"_id":"themes/fexo/source/sass/pages/_index.scss","hash":"d9fe73a87585abad06a7dd77b67ec7ce6c24402c","modified":1527515949595},{"_id":"themes/fexo/source/sass/pages/_home.scss","hash":"b65bb069ed28fbf223c5bb7e760882f79d20fa46","modified":1527515949595},{"_id":"themes/fexo/source/sass/pages/_archive.scss","hash":"fefd54282a42ebb68b711f1cfefa1f67abbde05b","modified":1527515949594},{"_id":"themes/fexo/source/sass/pages/_link.scss","hash":"d3a249423c7ee88d1cb3a12e03f6c42a0a4d45a1","modified":1527515949595},{"_id":"themes/fexo/source/sass/pages/_post.scss","hash":"c6f694568af362f9fe1e7e2b9909e47303178116","modified":1527515949596},{"_id":"themes/fexo/source/sass/pages/_project.scss","hash":"cab0947fc9d7926a07badaa567803cc7a0968f10","modified":1527515949596},{"_id":"themes/fexo/source/sass/pages/_search.scss","hash":"fd28f01829628c9d21f9391d5067ddcd836dad13","modified":1527515949596},{"_id":"themes/fexo/source/sass/component/_back-top.scss","hash":"1c67da7007f4b9d8c65deea3d82c0f579e65f2c2","modified":1527515949588},{"_id":"themes/fexo/source/sass/component/_category-box.scss","hash":"a807145b74d1b98270ea19ae35edd25b4c448bfa","modified":1527515949588},{"_id":"themes/fexo/source/sass/component/_comments.scss","hash":"3e9b61bc08f38f947f54e942986a19a7f95ce723","modified":1527515949589},{"_id":"themes/fexo/source/sass/component/_donation.scss","hash":"75102b0e6e4ef0a674f04fc8996c8f7ad058143d","modified":1527515949589},{"_id":"themes/fexo/source/sass/component/_hint.scss","hash":"2812b4e10313168f2e082b740c60d64a151d94c8","modified":1527515949589},{"_id":"themes/fexo/source/sass/component/_index.scss","hash":"a741a0bfb47d0acdef12cdeb968c104bb002f86d","modified":1527515949589},{"_id":"themes/fexo/source/sass/component/_item-category-name.scss","hash":"119840d160cd263b57e79e2099a81079d7eeee3d","modified":1527515949590},{"_id":"themes/fexo/source/sass/component/_item-post.scss","hash":"1fb2e9be2d2edbb538cfbce7c80d5847f88e2f05","modified":1527515949590},{"_id":"themes/fexo/source/sass/component/_item-title.scss","hash":"cdaca2858abc9428ef01103a7fbea8f095d856aa","modified":1527515949590},{"_id":"themes/fexo/source/sass/component/_item-year.scss","hash":"12c147dd4ab9587cd622083c86c2f6cf07d8e26a","modified":1527515949591},{"_id":"themes/fexo/source/sass/component/_list-post.scss","hash":"43564f6443385bf34e15672d1477d1c7560f5563","modified":1527515949591},{"_id":"themes/fexo/source/sass/component/_modal.scss","hash":"2f0ed96df388ec28445b1ce5c6a61a0a697f9a68","modified":1527515949591},{"_id":"themes/fexo/source/sass/component/_page-header.scss","hash":"893d0595ef48323dce449ef0d17308ce02b36087","modified":1527515949592},{"_id":"themes/fexo/source/sass/component/_pagination.scss","hash":"12c1880c518aee2e3ccf59661d01c308639f8a9e","modified":1527515949592},{"_id":"themes/fexo/source/sass/component/_prev-net.scss","hash":"1d282b3302e222adbc96a259f69d85afed980bcf","modified":1527515949592},{"_id":"themes/fexo/source/sass/component/_table.scss","hash":"4899fb31d1be8d5c9c397fcbcfc2ff0c5b2e7f7f","modified":1527515949593},{"_id":"themes/fexo/source/sass/component/_tag-box.scss","hash":"7601951d09a75a7c39493bfa1b1da5ac989d9cda","modified":1527515949593},{"_id":"themes/fexo/source/sass/component/_toc.scss","hash":"3b4c083cb2ba4a88ca35b6d8259ee991c83b3406","modified":1527515949593},{"_id":"themes/fexo/source/sass/component/_toolbox-mobile.scss","hash":"f15b215b9bb103ee1773a01d8badd81bb7643710","modified":1527515949593},{"_id":"themes/fexo/source/sass/component/_toolbox.scss","hash":"964a480d4e7fad100463195cde2a3f67f9765c23","modified":1527515949594},{"_id":"themes/fexo/.git/objects/pack/pack-8245be3cb971a7b30f41b9b7378255566e8b2d04.idx","hash":"c462f03494e5a2a9a65da68fc8bd423d70a73808","modified":1527515918296},{"_id":"themes/fexo/source/images/avatar.png","hash":"75ee5e32efbfb204e720b03003bee8552b85c43f","modified":1519665544098},{"_id":"themes/fexo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1527515949513},{"_id":"themes/fexo/.git/logs/refs/heads/master","hash":"5450348cbbe638b6d3920cf2b40fb91c3e5635bc","modified":1527515949515},{"_id":"themes/fexo/.git/logs/refs/remotes/origin/HEAD","hash":"5450348cbbe638b6d3920cf2b40fb91c3e5635bc","modified":1527515949513},{"_id":"themes/fexo/source/fonts/Lobster-Regular.eot","hash":"4f0c85f63beb0d95610317e16f1d4acdd2962eee","modified":1527515949551},{"_id":"themes/fexo/source/fonts/Lobster-Regular.ttf","hash":"50a84291b7012bfdcf9ff5116d6c7aa3f257f37f","modified":1527515949561},{"_id":"themes/fexo/source/fonts/Lobster-Regular.woff","hash":"298b80b1c9f694e1a055d62a5d809863c89baf50","modified":1527515949566},{"_id":"themes/fexo/source/fonts/Lobster-Regular.svg","hash":"be1cab622c673942fb4d11a23c012227938b4792","modified":1527515949558},{"_id":"themes/fexo/.git/objects/pack/pack-8245be3cb971a7b30f41b9b7378255566e8b2d04.pack","hash":"cf4c0e8d72d9e0986020009cb78a1d2a8ed9908f","modified":1527515918295},{"_id":"source/.DS_Store","hash":"c80da5b7c9c4b46044fa770d6969fb90711b3830","modified":1530447205611},{"_id":"source/_posts/microtask.css","hash":"44b0769ea58ceaaf4107b8e3e625eed1e84493ee","modified":1530439497278},{"_id":"public/2018/05/28/hello-world/index.html","hash":"535f13ae295a9a83b6dea673f70802601f14a4df","modified":1530801077204},{"_id":"public/archives/index.html","hash":"0269e40d576290d9203e5a0601425e4ff3bcabb4","modified":1530455062233},{"_id":"public/archives/2018/index.html","hash":"5031339cfe6875db1b07d2cc20551ad9e0d7bdf6","modified":1530455062233},{"_id":"public/archives/2018/05/index.html","hash":"2e4fb2b91a17383035ab203b07bd1b45b4133dbc","modified":1530455003586},{"_id":"public/archives/2018/06/index.html","hash":"4e001f86decd8dcfb7068f23db6d129380123bf1","modified":1530455003586},{"_id":"public/index.html","hash":"926c271c17b7aed3d4fedd33674daaa0b20f9e8f","modified":1530455003586},{"_id":"public/2018/06/06/译-通过从头实现一个promise来学习promise/index.html","hash":"50b37c7737de2ee8c695c9b865011d2cde2c71ac","modified":1530455003586},{"_id":"public/2018/07/01/microtask/index.html","hash":"1739c9d472129708ac350c5312741d8db0e8867d","modified":1530455003587},{"_id":"public/2018/07/01/译-Tasks-microtasks-queues-and-schedules/index.html","hash":"39f5829419059c7a16bc53296086fce4c8b0841e","modified":1530801077203},{"_id":"public/archives/2018/07/index.html","hash":"83881bad5e263b7bb3698fefb20c246bf7c1e058","modified":1530455062233}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"[译]Tasks,microtasks,queues,and schedules","date":"2018-07-01T08:47:20.000Z","_content":"\n如果你更喜欢视频讲解的话，推荐 [Philip Roberts](https://twitter.com/philip_roberts) 的 [great talk at JSConf on the event loop](https://www.youtube.com/watch?v=8aGhZQkoFbQ)，虽然没有涵盖 `microtasks` ，但却详细介绍了 `tasks、queues、schedules`\n\n[原文地址](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)\n\n思考以下JS片段\n```javascript\nconsole.log('script start');\n\nsetTimeout(function() {\n    console.log('setTimeout');\n}, 0);\n\nPromise.resolve().then(function() {\n    console.log('promise1');\n}).then(function() {\n    console.log('promise2');\n});\n\nconsole.log('script end');\n```\n\n控制台会打印什么呢？\n\n### 尝试\n\n<style type='text/css'>\n.Btn { \n\tdisplay: inline-block;\n    padding: 4px 12px;\n    margin-bottom: 0;\n    font-size: 14px;\n    line-height: 20px;\n    text-align: center;\n    text-shadow: 0 1px 1px rgba(255, 255, 255, 0.75);\n    vertical-align: middle;\n    cursor: pointer;\n    background: #f5f5f5;\n    background-image: linear-gradient(to bottom, #fff, #e6e6e6);\n    background-repeat: repeat-x;\n    border: 1px solid #bbb;\n    border-color: rgba(0, 0, 0, 0.15) rgba(0, 0, 0, 0.15) rgba(0, 0, 0, 0, 25);\n    border-radius: 4px;\n    box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);  \n}\n.Btn:hover {\n    background-position: 0 -15px;\n    background-color: #e6e6e6;\n    transition: background-position 0.1s linear;\n}\n.Btn:focus {\n    outline: 5px auto -webkit-focus-ring-color;\n    outline-offset: -2px;\n}\n.log-output{\n    width: 100%;\n    box-sizing: border-box;\n    height: 12.7em;\n    font: inherit;\n    line-height: 1.5;\n}\n</style>\n\n<button class=\"Btn clear\" id=\"clear\">clear log</button> <button class=\"Btn run\" id=\"run\">run test</button>\n<textarea class=\"log log-output log-output-1\" width=\"300\" height=\"200\"></textarea>\n<script>\nfunction log1(str) {\n    console.log(str)\n    var logEl = document.querySelector('.log-output-1')\n    logEl.value += (logEl.value ? '\\n' : '') + str\n}\ndocument.querySelector(\"#clear\").addEventListener(\"click\", function() {\n    document.querySelector('.log-output-1').value = ''\n})\ndocument.querySelector(\"#run\").addEventListener(\"click\", function() {\n    log1('script start')\n    setTimeout(function() {\n        log1('setTimeout')\n    }, 0)\n    \n    Promise.resolve().then(function() {\n        log1('promise1')\n    }).then(function() {\n        log1('promise2')\n    })\n    \n    log1('script end')\n})\n</script>\n\n正确答案是：`script start`，`script end`，`promise1`，`promise2`，`setTimeout`，打印的结果与浏览器的支持程度有莫大的关系\n\nMicrosoft Edge, Firefox 40, iOS Safari and desktop Safari 8.0.8 会在 `promise1` 和 `promsie2` 之前打印 `setTimeout`\n\n### 原因\n要理解这一点，你需要知道 `event loop` 如何处理 `tasks` 和 `microtasks` 的\n\n每个‘线程’都有自己的 `event loop`，因而每个 [`web worker`](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API)也都有自己的 `event loop`，同源的所有窗口共享一个 `event loop` 以便能够同步的交流。`event loop` 会持续不断地运行，执行队列中的所有任务。一个 `event loop` 会有多个任务源，可保证该源中任务的执行顺序(特别是 [IndexedDB](http://w3c.github.io/IndexedDB/#database-access-task-source) 等规范定义了自己的任务源)，但是浏览器会在 `event loop` 的每一个回合中选择从哪个源获取任务。这允许浏览器优先考虑性能敏感的任务，例如用户输入。\n\n`Tasks` 都是被安排好的，以便浏览器可以从其内部进入 JavaScript/DOM 域并确保这些操作能够按顺序执行。在 `tasks` 之间，浏览器可能会渲染更新。从鼠标单击到事件回调都需要安排任务，解析 `HTML` 以及上述例子中的 `setTimeout` 也是如此。\n\n`setTimeout` 等待给定的延迟，然后为其回调安排新的任务。这可以解释为什么 `setTimeout` 会在 `script end` 后面打印—— `script end` 是第一个任务的一部分，`setTimeout` 是在另一个任务中打印的。\n\n微任务(`Miscrotasks`)通常被安排用于处理在当前正在执行的脚本之后发生的事，例如对批量的行为作出反应，或者不必创建一个全新的任务去处理异步的事务。只要没有其他 JavaScript 在执行中，并且在每个任务结束时，就会在回调后处理微任务队列。在微任务中排列的任何额外的微任务都会添加到队列的末尾并进行处理。微任务包括变动观察回调函数（mutation observer callbacks），以前上面提到的 promise 回调\n\n一旦 promise 的状态凝滞，或者它的状态已经凝滞，便会为其回调往队列中添加一个微任务。这样能够确保即使 promise 的状态已经凝滞， promsie 回调也是异步的。所以对一个状态确定的 promise 调用 `.then(yey, nay)` 会立即往队列中添加一个微任务。`promise1` 和 `promise2` 会在 `script end` 后面打印便是如此，因为当前运行的脚本必须在处理微任务之前完成。微任务总是会在下一个任务之前发生，所以 `promise1` 和 `promise2` 会在 `setTimeout` 之前打印。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/译-Tasks-microtasks-queues-and-schedules.md","raw":"---\ntitle: '[译]Tasks,microtasks,queues,and schedules'\ndate: 2018-07-01 16:47:20\ntags:\n---\n\n如果你更喜欢视频讲解的话，推荐 [Philip Roberts](https://twitter.com/philip_roberts) 的 [great talk at JSConf on the event loop](https://www.youtube.com/watch?v=8aGhZQkoFbQ)，虽然没有涵盖 `microtasks` ，但却详细介绍了 `tasks、queues、schedules`\n\n[原文地址](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)\n\n思考以下JS片段\n```javascript\nconsole.log('script start');\n\nsetTimeout(function() {\n    console.log('setTimeout');\n}, 0);\n\nPromise.resolve().then(function() {\n    console.log('promise1');\n}).then(function() {\n    console.log('promise2');\n});\n\nconsole.log('script end');\n```\n\n控制台会打印什么呢？\n\n### 尝试\n\n<style type='text/css'>\n.Btn { \n\tdisplay: inline-block;\n    padding: 4px 12px;\n    margin-bottom: 0;\n    font-size: 14px;\n    line-height: 20px;\n    text-align: center;\n    text-shadow: 0 1px 1px rgba(255, 255, 255, 0.75);\n    vertical-align: middle;\n    cursor: pointer;\n    background: #f5f5f5;\n    background-image: linear-gradient(to bottom, #fff, #e6e6e6);\n    background-repeat: repeat-x;\n    border: 1px solid #bbb;\n    border-color: rgba(0, 0, 0, 0.15) rgba(0, 0, 0, 0.15) rgba(0, 0, 0, 0, 25);\n    border-radius: 4px;\n    box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);  \n}\n.Btn:hover {\n    background-position: 0 -15px;\n    background-color: #e6e6e6;\n    transition: background-position 0.1s linear;\n}\n.Btn:focus {\n    outline: 5px auto -webkit-focus-ring-color;\n    outline-offset: -2px;\n}\n.log-output{\n    width: 100%;\n    box-sizing: border-box;\n    height: 12.7em;\n    font: inherit;\n    line-height: 1.5;\n}\n</style>\n\n<button class=\"Btn clear\" id=\"clear\">clear log</button> <button class=\"Btn run\" id=\"run\">run test</button>\n<textarea class=\"log log-output log-output-1\" width=\"300\" height=\"200\"></textarea>\n<script>\nfunction log1(str) {\n    console.log(str)\n    var logEl = document.querySelector('.log-output-1')\n    logEl.value += (logEl.value ? '\\n' : '') + str\n}\ndocument.querySelector(\"#clear\").addEventListener(\"click\", function() {\n    document.querySelector('.log-output-1').value = ''\n})\ndocument.querySelector(\"#run\").addEventListener(\"click\", function() {\n    log1('script start')\n    setTimeout(function() {\n        log1('setTimeout')\n    }, 0)\n    \n    Promise.resolve().then(function() {\n        log1('promise1')\n    }).then(function() {\n        log1('promise2')\n    })\n    \n    log1('script end')\n})\n</script>\n\n正确答案是：`script start`，`script end`，`promise1`，`promise2`，`setTimeout`，打印的结果与浏览器的支持程度有莫大的关系\n\nMicrosoft Edge, Firefox 40, iOS Safari and desktop Safari 8.0.8 会在 `promise1` 和 `promsie2` 之前打印 `setTimeout`\n\n### 原因\n要理解这一点，你需要知道 `event loop` 如何处理 `tasks` 和 `microtasks` 的\n\n每个‘线程’都有自己的 `event loop`，因而每个 [`web worker`](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API)也都有自己的 `event loop`，同源的所有窗口共享一个 `event loop` 以便能够同步的交流。`event loop` 会持续不断地运行，执行队列中的所有任务。一个 `event loop` 会有多个任务源，可保证该源中任务的执行顺序(特别是 [IndexedDB](http://w3c.github.io/IndexedDB/#database-access-task-source) 等规范定义了自己的任务源)，但是浏览器会在 `event loop` 的每一个回合中选择从哪个源获取任务。这允许浏览器优先考虑性能敏感的任务，例如用户输入。\n\n`Tasks` 都是被安排好的，以便浏览器可以从其内部进入 JavaScript/DOM 域并确保这些操作能够按顺序执行。在 `tasks` 之间，浏览器可能会渲染更新。从鼠标单击到事件回调都需要安排任务，解析 `HTML` 以及上述例子中的 `setTimeout` 也是如此。\n\n`setTimeout` 等待给定的延迟，然后为其回调安排新的任务。这可以解释为什么 `setTimeout` 会在 `script end` 后面打印—— `script end` 是第一个任务的一部分，`setTimeout` 是在另一个任务中打印的。\n\n微任务(`Miscrotasks`)通常被安排用于处理在当前正在执行的脚本之后发生的事，例如对批量的行为作出反应，或者不必创建一个全新的任务去处理异步的事务。只要没有其他 JavaScript 在执行中，并且在每个任务结束时，就会在回调后处理微任务队列。在微任务中排列的任何额外的微任务都会添加到队列的末尾并进行处理。微任务包括变动观察回调函数（mutation observer callbacks），以前上面提到的 promise 回调\n\n一旦 promise 的状态凝滞，或者它的状态已经凝滞，便会为其回调往队列中添加一个微任务。这样能够确保即使 promise 的状态已经凝滞， promsie 回调也是异步的。所以对一个状态确定的 promise 调用 `.then(yey, nay)` 会立即往队列中添加一个微任务。`promise1` 和 `promise2` 会在 `script end` 后面打印便是如此，因为当前运行的脚本必须在处理微任务之前完成。微任务总是会在下一个任务之前发生，所以 `promise1` 和 `promise2` 会在 `setTimeout` 之前打印。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"译-Tasks-microtasks-queues-and-schedules","published":1,"updated":"2018-07-05T14:30:39.682Z","_id":"cjj2luf8q0000dylyl5mg8eqt","comments":1,"layout":"post","photos":[],"link":"","content":"<p>如果你更喜欢视频讲解的话，推荐 <a href=\"https://twitter.com/philip_roberts\" target=\"_blank\" rel=\"noopener\">Philip Roberts</a> 的 <a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ\" target=\"_blank\" rel=\"noopener\">great talk at JSConf on the event loop</a>，虽然没有涵盖 <code>microtasks</code> ，但却详细介绍了 <code>tasks、queues、schedules</code></p>\n<p><a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n<p>思考以下JS片段<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script start'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'setTimeout'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise2'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script end'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>控制台会打印什么呢？</p>\n<h3 id=\"尝试\"><a href=\"#尝试\" class=\"headerlink\" title=\"尝试\"></a>尝试</h3><style type=\"text/css\">\n.Btn { \n    display: inline-block;\n    padding: 4px 12px;\n    margin-bottom: 0;\n    font-size: 14px;\n    line-height: 20px;\n    text-align: center;\n    text-shadow: 0 1px 1px rgba(255, 255, 255, 0.75);\n    vertical-align: middle;\n    cursor: pointer;\n    background: #f5f5f5;\n    background-image: linear-gradient(to bottom, #fff, #e6e6e6);\n    background-repeat: repeat-x;\n    border: 1px solid #bbb;\n    border-color: rgba(0, 0, 0, 0.15) rgba(0, 0, 0, 0.15) rgba(0, 0, 0, 0, 25);\n    border-radius: 4px;\n    box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);  \n}\n.Btn:hover {\n    background-position: 0 -15px;\n    background-color: #e6e6e6;\n    transition: background-position 0.1s linear;\n}\n.Btn:focus {\n    outline: 5px auto -webkit-focus-ring-color;\n    outline-offset: -2px;\n}\n.log-output{\n    width: 100%;\n    box-sizing: border-box;\n    height: 12.7em;\n    font: inherit;\n    line-height: 1.5;\n}\n</style>\n\n<p><button class=\"Btn clear\" id=\"clear\">clear log</button> <button class=\"Btn run\" id=\"run\">run test</button></p>\n<p><textarea class=\"log log-output log-output-1\" width=\"300\" height=\"200\"></textarea></p>\n<script>\nfunction log1(str) {\n    console.log(str)\n    var logEl = document.querySelector('.log-output-1')\n    logEl.value += (logEl.value ? '\\n' : '') + str\n}\ndocument.querySelector(\"#clear\").addEventListener(\"click\", function() {\n    document.querySelector('.log-output-1').value = ''\n})\ndocument.querySelector(\"#run\").addEventListener(\"click\", function() {\n    log1('script start')\n    setTimeout(function() {\n        log1('setTimeout')\n    }, 0)\n\n    Promise.resolve().then(function() {\n        log1('promise1')\n    }).then(function() {\n        log1('promise2')\n    })\n\n    log1('script end')\n})\n</script>\n\n<p>正确答案是：<code>script start</code>，<code>script end</code>，<code>promise1</code>，<code>promise2</code>，<code>setTimeout</code>，打印的结果与浏览器的支持程度有莫大的关系</p>\n<p>Microsoft Edge, Firefox 40, iOS Safari and desktop Safari 8.0.8 会在 <code>promise1</code> 和 <code>promsie2</code> 之前打印 <code>setTimeout</code></p>\n<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>要理解这一点，你需要知道 <code>event loop</code> 如何处理 <code>tasks</code> 和 <code>microtasks</code> 的</p>\n<p>每个‘线程’都有自己的 <code>event loop</code>，因而每个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API\" target=\"_blank\" rel=\"noopener\"><code>web worker</code></a>也都有自己的 <code>event loop</code>，同源的所有窗口共享一个 <code>event loop</code> 以便能够同步的交流。<code>event loop</code> 会持续不断地运行，执行队列中的所有任务。一个 <code>event loop</code> 会有多个任务源，可保证该源中任务的执行顺序(特别是 <a href=\"http://w3c.github.io/IndexedDB/#database-access-task-source\" target=\"_blank\" rel=\"noopener\">IndexedDB</a> 等规范定义了自己的任务源)，但是浏览器会在 <code>event loop</code> 的每一个回合中选择从哪个源获取任务。这允许浏览器优先考虑性能敏感的任务，例如用户输入。</p>\n<p><code>Tasks</code> 都是被安排好的，以便浏览器可以从其内部进入 JavaScript/DOM 域并确保这些操作能够按顺序执行。在 <code>tasks</code> 之间，浏览器可能会渲染更新。从鼠标单击到事件回调都需要安排任务，解析 <code>HTML</code> 以及上述例子中的 <code>setTimeout</code> 也是如此。</p>\n<p><code>setTimeout</code> 等待给定的延迟，然后为其回调安排新的任务。这可以解释为什么 <code>setTimeout</code> 会在 <code>script end</code> 后面打印—— <code>script end</code> 是第一个任务的一部分，<code>setTimeout</code> 是在另一个任务中打印的。</p>\n<p>微任务(<code>Miscrotasks</code>)通常被安排用于处理在当前正在执行的脚本之后发生的事，例如对批量的行为作出反应，或者不必创建一个全新的任务去处理异步的事务。只要没有其他 JavaScript 在执行中，并且在每个任务结束时，就会在回调后处理微任务队列。在微任务中排列的任何额外的微任务都会添加到队列的末尾并进行处理。微任务包括变动观察回调函数（mutation observer callbacks），以前上面提到的 promise 回调</p>\n<p>一旦 promise 的状态凝滞，或者它的状态已经凝滞，便会为其回调往队列中添加一个微任务。这样能够确保即使 promise 的状态已经凝滞， promsie 回调也是异步的。所以对一个状态确定的 promise 调用 <code>.then(yey, nay)</code> 会立即往队列中添加一个微任务。<code>promise1</code> 和 <code>promise2</code> 会在 <code>script end</code> 后面打印便是如此，因为当前运行的脚本必须在处理微任务之前完成。微任务总是会在下一个任务之前发生，所以 <code>promise1</code> 和 <code>promise2</code> 会在 <code>setTimeout</code> 之前打印。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果你更喜欢视频讲解的话，推荐 <a href=\"https://twitter.com/philip_roberts\" target=\"_blank\" rel=\"noopener\">Philip Roberts</a> 的 <a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ\" target=\"_blank\" rel=\"noopener\">great talk at JSConf on the event loop</a>，虽然没有涵盖 <code>microtasks</code> ，但却详细介绍了 <code>tasks、queues、schedules</code></p>\n<p><a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n<p>思考以下JS片段<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script start'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'setTimeout'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise2'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script end'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>控制台会打印什么呢？</p>\n<h3 id=\"尝试\"><a href=\"#尝试\" class=\"headerlink\" title=\"尝试\"></a>尝试</h3><style type=\"text/css\">\n.Btn { \n    display: inline-block;\n    padding: 4px 12px;\n    margin-bottom: 0;\n    font-size: 14px;\n    line-height: 20px;\n    text-align: center;\n    text-shadow: 0 1px 1px rgba(255, 255, 255, 0.75);\n    vertical-align: middle;\n    cursor: pointer;\n    background: #f5f5f5;\n    background-image: linear-gradient(to bottom, #fff, #e6e6e6);\n    background-repeat: repeat-x;\n    border: 1px solid #bbb;\n    border-color: rgba(0, 0, 0, 0.15) rgba(0, 0, 0, 0.15) rgba(0, 0, 0, 0, 25);\n    border-radius: 4px;\n    box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);  \n}\n.Btn:hover {\n    background-position: 0 -15px;\n    background-color: #e6e6e6;\n    transition: background-position 0.1s linear;\n}\n.Btn:focus {\n    outline: 5px auto -webkit-focus-ring-color;\n    outline-offset: -2px;\n}\n.log-output{\n    width: 100%;\n    box-sizing: border-box;\n    height: 12.7em;\n    font: inherit;\n    line-height: 1.5;\n}\n</style>\n\n<p><button class=\"Btn clear\" id=\"clear\">clear log</button> <button class=\"Btn run\" id=\"run\">run test</button></p>\n<p><textarea class=\"log log-output log-output-1\" width=\"300\" height=\"200\"></textarea></p>\n<script>\nfunction log1(str) {\n    console.log(str)\n    var logEl = document.querySelector('.log-output-1')\n    logEl.value += (logEl.value ? '\\n' : '') + str\n}\ndocument.querySelector(\"#clear\").addEventListener(\"click\", function() {\n    document.querySelector('.log-output-1').value = ''\n})\ndocument.querySelector(\"#run\").addEventListener(\"click\", function() {\n    log1('script start')\n    setTimeout(function() {\n        log1('setTimeout')\n    }, 0)\n\n    Promise.resolve().then(function() {\n        log1('promise1')\n    }).then(function() {\n        log1('promise2')\n    })\n\n    log1('script end')\n})\n</script>\n\n<p>正确答案是：<code>script start</code>，<code>script end</code>，<code>promise1</code>，<code>promise2</code>，<code>setTimeout</code>，打印的结果与浏览器的支持程度有莫大的关系</p>\n<p>Microsoft Edge, Firefox 40, iOS Safari and desktop Safari 8.0.8 会在 <code>promise1</code> 和 <code>promsie2</code> 之前打印 <code>setTimeout</code></p>\n<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>要理解这一点，你需要知道 <code>event loop</code> 如何处理 <code>tasks</code> 和 <code>microtasks</code> 的</p>\n<p>每个‘线程’都有自己的 <code>event loop</code>，因而每个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API\" target=\"_blank\" rel=\"noopener\"><code>web worker</code></a>也都有自己的 <code>event loop</code>，同源的所有窗口共享一个 <code>event loop</code> 以便能够同步的交流。<code>event loop</code> 会持续不断地运行，执行队列中的所有任务。一个 <code>event loop</code> 会有多个任务源，可保证该源中任务的执行顺序(特别是 <a href=\"http://w3c.github.io/IndexedDB/#database-access-task-source\" target=\"_blank\" rel=\"noopener\">IndexedDB</a> 等规范定义了自己的任务源)，但是浏览器会在 <code>event loop</code> 的每一个回合中选择从哪个源获取任务。这允许浏览器优先考虑性能敏感的任务，例如用户输入。</p>\n<p><code>Tasks</code> 都是被安排好的，以便浏览器可以从其内部进入 JavaScript/DOM 域并确保这些操作能够按顺序执行。在 <code>tasks</code> 之间，浏览器可能会渲染更新。从鼠标单击到事件回调都需要安排任务，解析 <code>HTML</code> 以及上述例子中的 <code>setTimeout</code> 也是如此。</p>\n<p><code>setTimeout</code> 等待给定的延迟，然后为其回调安排新的任务。这可以解释为什么 <code>setTimeout</code> 会在 <code>script end</code> 后面打印—— <code>script end</code> 是第一个任务的一部分，<code>setTimeout</code> 是在另一个任务中打印的。</p>\n<p>微任务(<code>Miscrotasks</code>)通常被安排用于处理在当前正在执行的脚本之后发生的事，例如对批量的行为作出反应，或者不必创建一个全新的任务去处理异步的事务。只要没有其他 JavaScript 在执行中，并且在每个任务结束时，就会在回调后处理微任务队列。在微任务中排列的任何额外的微任务都会添加到队列的末尾并进行处理。微任务包括变动观察回调函数（mutation observer callbacks），以前上面提到的 promise 回调</p>\n<p>一旦 promise 的状态凝滞，或者它的状态已经凝滞，便会为其回调往队列中添加一个微任务。这样能够确保即使 promise 的状态已经凝滞， promsie 回调也是异步的。所以对一个状态确定的 promise 调用 <code>.then(yey, nay)</code> 会立即往队列中添加一个微任务。<code>promise1</code> 和 <code>promise2</code> 会在 <code>script end</code> 后面打印便是如此，因为当前运行的脚本必须在处理微任务之前完成。微任务总是会在下一个任务之前发生，所以 <code>promise1</code> 和 <code>promise2</code> 会在 <code>setTimeout</code> 之前打印。</p>\n"},{"title":"Hello World","_content":"清理老博客，hello world :)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\n清理老博客，hello world :)\n","slug":"hello-world","published":1,"date":"2018-05-28T13:42:01.221Z","updated":"2018-07-01T14:29:10.753Z","_id":"cjj2luf8u0001dylyu53c58ew","comments":1,"layout":"post","photos":[],"link":"","content":"<p>清理老博客，hello world :)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>清理老博客，hello world :)</p>\n"},{"title":"[译]通过从头实现一个promise来学习promise","date":"2018-06-06T13:45:14.000Z","_content":"[原文地址：Learn JavaScript Promises by Building a Promise from Scratch\n](https://levelup.gitconnected.com/understand-javascript-promises-by-building-a-promise-from-scratch-84c0fd855720)\n\n---\n\n通过自建一个 `Promise` 逐步了解 `Promise` 的工作原理\n\n你以前可能见过类似下方的代码：\n\n```javascript\nfetch('/user/1')\n  .then((user) => {\n      /* Do something with user after the API returns */\n  })\n```\n\n`.then()` 中包裹的代码块在执行之前，会一直等待，直到接收到来自服务器的响应。这就叫做 `Promise`。但千万不要被这花名和其中的异步代码吓退——一个 `Promise` 只是一个很普通的旧的 `JavaScript` 对象，它具有特殊的方法，可以让你同步执行代码(即使有延迟，它也会按顺序执行)\n\n```javascript\ntypeof new Promise((resolve, reject) => {}) === 'object'\n// true\n```\n\n重申一遍(原作者语：我第一次学习 `promise` 时，我很难把握 `promise` 的要点)，`Promise` 只是一个对象。为了保证会等待服务器并在服务器返回响应后执行 `.then()` 方法链中的代码，你<b>必须</b>返回一个 `Promise` 对象。这跟某些开箱即用的函数是两码事。下面的例子中，`fetch` 函数就是这么个函数\n\n```javascript\nconst fetch = function(url) {\n    return new Promise((resolve, reject) => {\n        request((error, apiResponse) => {\n            if (error) {\n                reject(error)\n            }\n            \n            resolve(apiResponse)\n        })\n    })\n}\n```\n上述的 `fetch()` 函数向服务器发送一个 http 请求，但客户端并不知道服务器何时返回结果。所以，`JavaScript` 会在等待服务器返回结果期间，执行其他无关的代码，一旦客户端接收到服务器返回的响应，它就会通过调用 `resolve(apiResponse)` 开始执行 `.then()` 语句中的代码。\n\n---\n\n现在让我们仔细看看 `Promise` 到底是如何做到这一点的：\n\n```javascript\nclass PromiseSimple {\n    constructor(executionFunction) {\n        this.promiseChain = [];\n        this.handleError = () => {};\n        \n        this.onResolve = this.onResolve.bind(this)\n        this.onReject = this.onReject.bind(this)\n        \n        executionFunction(this.onResolve, this.onReject)\n    }\n    \n    then(onResolve) {\n        this.promiseChain.push(onResolve)\n    \t\n    \treturn this\n    }\n    \n    catch(handleError) {\n        this.handleError = handleError\n        \n        return this\n    }\n    \n    onResolve(value) {\n        let storedValue = value\n        \n        try {\n            this.promiseChain.forEach((nextFunction) => {\n                storedValue = nextFunction(storedValue)\n            })\n        } catch (error) {\n            this.promiseChain = [];\n            \n            this.onReject(error)\n        }\n    }\n    \n    onReject(error) {\n        this.handleError(error)\n    }\n}\n```\n\n> 注意：上述版本的 `Promise` 只是用了学习 `Promise` 工作原理的，省略了一些更高级的功能，只提炼了最核心的部分\n\n### 工作原理\n\n我将其命名为 `PromiseSimple` ，防止在 Chrome 控制台运行上述代码时，原生的 `Promise` 被覆盖。上述版本的 promise 实现有一个构造函数，两个公共方法(与原生的 `then()` 和 `catch()` 类似)，两个内置方法： `onResolve()` 和 `onReject()`\n\n\n1. 当你创建一个 promise 时，你会像这样创建： `new Promise((resolve, reject) => {/* ... */})`。你会在构造函数中向 promise 传递一个回调函数，我命名为 `executionFunction`。执行函数会携带 `resolve` 和 `reject` ，映射为内置的 `onResolve` 和 `onReject` 方法。这些方法都会在 `fetch` 调用 resolve 或 reject 时被调用。\n\n\n2. 构造函数也会创建一个 `promiseChain` 数组和 `handleError` 函数。当 promise 后面接了一串 `.then(() => {})` 时，它会将每一个函数添加到 `promiseChain` 中；当用户调用 `catch(() => {})` 时，它会将函数分配给内部的 `handleError`。注意，`then()` 和 `catch` 都有 `return this`，以便可以链式调用 `then()`\n\n> 注意：对原生的 `Promise` 而言，它的 `then()` 和 `catch()` 函数都会返回一个 `new Promise`，而上述简版 `Promise` 只是返回了 `this`。另外，多个 `.catch()` 也可以链式调用，不一定要接在 `.then()` 方法链的末尾\n\n\n3. 当你的异步代码调用了 `resolve(apiResponse)`，自建的 promise 对象便会开始执行 `onResolve(apiResponse)`：迭代整个 `promiseChain` ，取出队首的方法，传入 `storedValue` 中最近保存的值并执行，然后用最近执行的结果更新 `storedValue`。它会按顺序执行 `promiseChain` 中保存的函数，借此创建同步的 `promise` 链。\n\n\n4. 该循环（上述的迭代）被封装在 `try/catch` 块中，以便捕获运行时的错误。如果你的异步代码调用了 `reject(error)` 或者 `try/catch` 捕获了一个错误，它将被传递给 `onReject()` 方法，该方法调用作为参数传递给 `.catch()` 的回调函数。\n\n### promiseSimple with test example\n\n### 具体的实现及使用\n\n```javascript\nclass PromiseSimple {\n    constructor(executionFunction) {\n        this.promiseChain = [];\n        this.handleError = () => {}\n    \t\n    \tthis.onResolve = this.onResolve.bind(this)\n    \tthis.onReject = this.onReject.bind(this)\n    \n    \texecutionFunction(this.onResolve, this.onReject)\n    }\n    \n    then(onResolve) {\n        this.promiseChain.push(onResolve)\n        \n        return this\n    }\n    \n    catch(handleError) {\n        this.handleError = handleError\n        \n        return this\n    }\n    \n    onResolve(value) {\n        let storedValue = value\n        \n        try {\n            this.promiseChain.forEach((nextFunction) => {\n                storedValue = nextFunction(storedValue)\n            })\n        } catch (error) {\n            this.promiseChain = [];\n            \n            this.onReject(error)\n        }\n    }\n    \n    onReject(error) {\n        this.handleError(error)\n    }\n}\n\n// test example\nfakeApiBackend = () => {\n    const user = {\n        username: 'treyhuffine',\n        favoriteNumber: 42,\n        profile: 'https://gitconnected.com/treyhuffine'\n    }\n    \n    if (Math.random() > .05) {\n    \treturn {\n            data: user,\n            statusCode: 200\n    \t}\n    } else {\n        const error = {\n            statusCode: 404,\n            message: 'Could not find user',\n            error: 'Not Found'\n        }\n        \n        return error\n    }\n}\n\nconst makeApiCall = () => {\n    return new PromiseSimple((resolve, reject) => {\n        setTimeout(() => {\n            const apiResponse = fakeApiBackend()\n            \n            if (apiResponse.statusCode >= 400) {\n                reject(apiResponse)\n            } else {\n                resolve(apiResponse.data)\n            }\n        }, 5000)\n    })\n}\n\nmakeApiCall()\n\t.then((user) => {\n        console.log('In the first .then()')\n        \n        return user\n\t})\n\t.then((user) => {\n        console.log(`User ${user.username}'s favorite number is ${user.favoriteNumber}`)\n        \n        return user\n\t})\n\t.then((user) => {\n        console.log('The previous .then() told you the favoriteNumber')\n        \n        return user.profile\n\t})\n\t.then((profile) => {\n        console.log(`The profile URL is ${profile}`)\n\t})\n\t.then(() => {\n        console.log('This is the last then()')\n\t})\n\t.catch((error) => {\n        console.log(error.message)\n\t})\n```","source":"_posts/译-通过从头实现一个promise来学习promise.md","raw":"---\ntitle: '[译]通过从头实现一个promise来学习promise'\ndate: 2018-06-06 21:45:14\ntags:\n---\n[原文地址：Learn JavaScript Promises by Building a Promise from Scratch\n](https://levelup.gitconnected.com/understand-javascript-promises-by-building-a-promise-from-scratch-84c0fd855720)\n\n---\n\n通过自建一个 `Promise` 逐步了解 `Promise` 的工作原理\n\n你以前可能见过类似下方的代码：\n\n```javascript\nfetch('/user/1')\n  .then((user) => {\n      /* Do something with user after the API returns */\n  })\n```\n\n`.then()` 中包裹的代码块在执行之前，会一直等待，直到接收到来自服务器的响应。这就叫做 `Promise`。但千万不要被这花名和其中的异步代码吓退——一个 `Promise` 只是一个很普通的旧的 `JavaScript` 对象，它具有特殊的方法，可以让你同步执行代码(即使有延迟，它也会按顺序执行)\n\n```javascript\ntypeof new Promise((resolve, reject) => {}) === 'object'\n// true\n```\n\n重申一遍(原作者语：我第一次学习 `promise` 时，我很难把握 `promise` 的要点)，`Promise` 只是一个对象。为了保证会等待服务器并在服务器返回响应后执行 `.then()` 方法链中的代码，你<b>必须</b>返回一个 `Promise` 对象。这跟某些开箱即用的函数是两码事。下面的例子中，`fetch` 函数就是这么个函数\n\n```javascript\nconst fetch = function(url) {\n    return new Promise((resolve, reject) => {\n        request((error, apiResponse) => {\n            if (error) {\n                reject(error)\n            }\n            \n            resolve(apiResponse)\n        })\n    })\n}\n```\n上述的 `fetch()` 函数向服务器发送一个 http 请求，但客户端并不知道服务器何时返回结果。所以，`JavaScript` 会在等待服务器返回结果期间，执行其他无关的代码，一旦客户端接收到服务器返回的响应，它就会通过调用 `resolve(apiResponse)` 开始执行 `.then()` 语句中的代码。\n\n---\n\n现在让我们仔细看看 `Promise` 到底是如何做到这一点的：\n\n```javascript\nclass PromiseSimple {\n    constructor(executionFunction) {\n        this.promiseChain = [];\n        this.handleError = () => {};\n        \n        this.onResolve = this.onResolve.bind(this)\n        this.onReject = this.onReject.bind(this)\n        \n        executionFunction(this.onResolve, this.onReject)\n    }\n    \n    then(onResolve) {\n        this.promiseChain.push(onResolve)\n    \t\n    \treturn this\n    }\n    \n    catch(handleError) {\n        this.handleError = handleError\n        \n        return this\n    }\n    \n    onResolve(value) {\n        let storedValue = value\n        \n        try {\n            this.promiseChain.forEach((nextFunction) => {\n                storedValue = nextFunction(storedValue)\n            })\n        } catch (error) {\n            this.promiseChain = [];\n            \n            this.onReject(error)\n        }\n    }\n    \n    onReject(error) {\n        this.handleError(error)\n    }\n}\n```\n\n> 注意：上述版本的 `Promise` 只是用了学习 `Promise` 工作原理的，省略了一些更高级的功能，只提炼了最核心的部分\n\n### 工作原理\n\n我将其命名为 `PromiseSimple` ，防止在 Chrome 控制台运行上述代码时，原生的 `Promise` 被覆盖。上述版本的 promise 实现有一个构造函数，两个公共方法(与原生的 `then()` 和 `catch()` 类似)，两个内置方法： `onResolve()` 和 `onReject()`\n\n\n1. 当你创建一个 promise 时，你会像这样创建： `new Promise((resolve, reject) => {/* ... */})`。你会在构造函数中向 promise 传递一个回调函数，我命名为 `executionFunction`。执行函数会携带 `resolve` 和 `reject` ，映射为内置的 `onResolve` 和 `onReject` 方法。这些方法都会在 `fetch` 调用 resolve 或 reject 时被调用。\n\n\n2. 构造函数也会创建一个 `promiseChain` 数组和 `handleError` 函数。当 promise 后面接了一串 `.then(() => {})` 时，它会将每一个函数添加到 `promiseChain` 中；当用户调用 `catch(() => {})` 时，它会将函数分配给内部的 `handleError`。注意，`then()` 和 `catch` 都有 `return this`，以便可以链式调用 `then()`\n\n> 注意：对原生的 `Promise` 而言，它的 `then()` 和 `catch()` 函数都会返回一个 `new Promise`，而上述简版 `Promise` 只是返回了 `this`。另外，多个 `.catch()` 也可以链式调用，不一定要接在 `.then()` 方法链的末尾\n\n\n3. 当你的异步代码调用了 `resolve(apiResponse)`，自建的 promise 对象便会开始执行 `onResolve(apiResponse)`：迭代整个 `promiseChain` ，取出队首的方法，传入 `storedValue` 中最近保存的值并执行，然后用最近执行的结果更新 `storedValue`。它会按顺序执行 `promiseChain` 中保存的函数，借此创建同步的 `promise` 链。\n\n\n4. 该循环（上述的迭代）被封装在 `try/catch` 块中，以便捕获运行时的错误。如果你的异步代码调用了 `reject(error)` 或者 `try/catch` 捕获了一个错误，它将被传递给 `onReject()` 方法，该方法调用作为参数传递给 `.catch()` 的回调函数。\n\n### promiseSimple with test example\n\n### 具体的实现及使用\n\n```javascript\nclass PromiseSimple {\n    constructor(executionFunction) {\n        this.promiseChain = [];\n        this.handleError = () => {}\n    \t\n    \tthis.onResolve = this.onResolve.bind(this)\n    \tthis.onReject = this.onReject.bind(this)\n    \n    \texecutionFunction(this.onResolve, this.onReject)\n    }\n    \n    then(onResolve) {\n        this.promiseChain.push(onResolve)\n        \n        return this\n    }\n    \n    catch(handleError) {\n        this.handleError = handleError\n        \n        return this\n    }\n    \n    onResolve(value) {\n        let storedValue = value\n        \n        try {\n            this.promiseChain.forEach((nextFunction) => {\n                storedValue = nextFunction(storedValue)\n            })\n        } catch (error) {\n            this.promiseChain = [];\n            \n            this.onReject(error)\n        }\n    }\n    \n    onReject(error) {\n        this.handleError(error)\n    }\n}\n\n// test example\nfakeApiBackend = () => {\n    const user = {\n        username: 'treyhuffine',\n        favoriteNumber: 42,\n        profile: 'https://gitconnected.com/treyhuffine'\n    }\n    \n    if (Math.random() > .05) {\n    \treturn {\n            data: user,\n            statusCode: 200\n    \t}\n    } else {\n        const error = {\n            statusCode: 404,\n            message: 'Could not find user',\n            error: 'Not Found'\n        }\n        \n        return error\n    }\n}\n\nconst makeApiCall = () => {\n    return new PromiseSimple((resolve, reject) => {\n        setTimeout(() => {\n            const apiResponse = fakeApiBackend()\n            \n            if (apiResponse.statusCode >= 400) {\n                reject(apiResponse)\n            } else {\n                resolve(apiResponse.data)\n            }\n        }, 5000)\n    })\n}\n\nmakeApiCall()\n\t.then((user) => {\n        console.log('In the first .then()')\n        \n        return user\n\t})\n\t.then((user) => {\n        console.log(`User ${user.username}'s favorite number is ${user.favoriteNumber}`)\n        \n        return user\n\t})\n\t.then((user) => {\n        console.log('The previous .then() told you the favoriteNumber')\n        \n        return user.profile\n\t})\n\t.then((profile) => {\n        console.log(`The profile URL is ${profile}`)\n\t})\n\t.then(() => {\n        console.log('This is the last then()')\n\t})\n\t.catch((error) => {\n        console.log(error.message)\n\t})\n```","slug":"译-通过从头实现一个promise来学习promise","published":1,"updated":"2018-06-06T15:19:53.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj2luf8x0002dylyxc2rgv5w","content":"<p><a href=\"https://levelup.gitconnected.com/understand-javascript-promises-by-building-a-promise-from-scratch-84c0fd855720\" target=\"_blank\" rel=\"noopener\">原文地址：Learn JavaScript Promises by Building a Promise from Scratch\n</a></p>\n<hr>\n<p>通过自建一个 <code>Promise</code> 逐步了解 <code>Promise</code> 的工作原理</p>\n<p>你以前可能见过类似下方的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">'/user/1'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* Do something with user after the API returns */</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<p><code>.then()</code> 中包裹的代码块在执行之前，会一直等待，直到接收到来自服务器的响应。这就叫做 <code>Promise</code>。但千万不要被这花名和其中的异步代码吓退——一个 <code>Promise</code> 只是一个很普通的旧的 <code>JavaScript</code> 对象，它具有特殊的方法，可以让你同步执行代码(即使有延迟，它也会按顺序执行)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;&#125;) === <span class=\"string\">'object'</span></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>重申一遍(原作者语：我第一次学习 <code>promise</code> 时，我很难把握 <code>promise</code> 的要点)，<code>Promise</code> 只是一个对象。为了保证会等待服务器并在服务器返回响应后执行 <code>.then()</code> 方法链中的代码，你<b>必须</b>返回一个 <code>Promise</code> 对象。这跟某些开箱即用的函数是两码事。下面的例子中，<code>fetch</code> 函数就是这么个函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fetch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        request(<span class=\"function\">(<span class=\"params\">error, apiResponse</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">                reject(error)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            resolve(apiResponse)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述的 <code>fetch()</code> 函数向服务器发送一个 http 请求，但客户端并不知道服务器何时返回结果。所以，<code>JavaScript</code> 会在等待服务器返回结果期间，执行其他无关的代码，一旦客户端接收到服务器返回的响应，它就会通过调用 <code>resolve(apiResponse)</code> 开始执行 <code>.then()</code> 语句中的代码。</p>\n<hr>\n<p>现在让我们仔细看看 <code>Promise</code> 到底是如何做到这一点的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PromiseSimple</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(executionFunction) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.promiseChain = [];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handleError = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolve = <span class=\"keyword\">this</span>.onResolve.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onReject = <span class=\"keyword\">this</span>.onReject.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        executionFunction(<span class=\"keyword\">this</span>.onResolve, <span class=\"keyword\">this</span>.onReject)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    then(onResolve) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.promiseChain.push(onResolve)</span><br><span class=\"line\">    \t</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">catch</span>(handleError) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handleError = handleError</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    onResolve(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> storedValue = value</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.promiseChain.forEach(<span class=\"function\">(<span class=\"params\">nextFunction</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                storedValue = nextFunction(storedValue)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.promiseChain = [];</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">this</span>.onReject(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    onReject(error) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handleError(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：上述版本的 <code>Promise</code> 只是用了学习 <code>Promise</code> 工作原理的，省略了一些更高级的功能，只提炼了最核心的部分</p>\n</blockquote>\n<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h3><p>我将其命名为 <code>PromiseSimple</code> ，防止在 Chrome 控制台运行上述代码时，原生的 <code>Promise</code> 被覆盖。上述版本的 promise 实现有一个构造函数，两个公共方法(与原生的 <code>then()</code> 和 <code>catch()</code> 类似)，两个内置方法： <code>onResolve()</code> 和 <code>onReject()</code></p>\n<ol>\n<li>当你创建一个 promise 时，你会像这样创建： <code>new Promise((resolve, reject) =&gt; {/* ... */})</code>。你会在构造函数中向 promise 传递一个回调函数，我命名为 <code>executionFunction</code>。执行函数会携带 <code>resolve</code> 和 <code>reject</code> ，映射为内置的 <code>onResolve</code> 和 <code>onReject</code> 方法。这些方法都会在 <code>fetch</code> 调用 resolve 或 reject 时被调用。</li>\n</ol>\n<ol start=\"2\">\n<li>构造函数也会创建一个 <code>promiseChain</code> 数组和 <code>handleError</code> 函数。当 promise 后面接了一串 <code>.then(() =&gt; {})</code> 时，它会将每一个函数添加到 <code>promiseChain</code> 中；当用户调用 <code>catch(() =&gt; {})</code> 时，它会将函数分配给内部的 <code>handleError</code>。注意，<code>then()</code> 和 <code>catch</code> 都有 <code>return this</code>，以便可以链式调用 <code>then()</code></li>\n</ol>\n<blockquote>\n<p>注意：对原生的 <code>Promise</code> 而言，它的 <code>then()</code> 和 <code>catch()</code> 函数都会返回一个 <code>new Promise</code>，而上述简版 <code>Promise</code> 只是返回了 <code>this</code>。另外，多个 <code>.catch()</code> 也可以链式调用，不一定要接在 <code>.then()</code> 方法链的末尾</p>\n</blockquote>\n<ol start=\"3\">\n<li>当你的异步代码调用了 <code>resolve(apiResponse)</code>，自建的 promise 对象便会开始执行 <code>onResolve(apiResponse)</code>：迭代整个 <code>promiseChain</code> ，取出队首的方法，传入 <code>storedValue</code> 中最近保存的值并执行，然后用最近执行的结果更新 <code>storedValue</code>。它会按顺序执行 <code>promiseChain</code> 中保存的函数，借此创建同步的 <code>promise</code> 链。</li>\n</ol>\n<ol start=\"4\">\n<li>该循环（上述的迭代）被封装在 <code>try/catch</code> 块中，以便捕获运行时的错误。如果你的异步代码调用了 <code>reject(error)</code> 或者 <code>try/catch</code> 捕获了一个错误，它将被传递给 <code>onReject()</code> 方法，该方法调用作为参数传递给 <code>.catch()</code> 的回调函数。</li>\n</ol>\n<h3 id=\"promiseSimple-with-test-example\"><a href=\"#promiseSimple-with-test-example\" class=\"headerlink\" title=\"promiseSimple with test example\"></a>promiseSimple with test example</h3><h3 id=\"具体的实现及使用\"><a href=\"#具体的实现及使用\" class=\"headerlink\" title=\"具体的实现及使用\"></a>具体的实现及使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PromiseSimple</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(executionFunction) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.promiseChain = [];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handleError = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.onResolve = <span class=\"keyword\">this</span>.onResolve.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.onReject = <span class=\"keyword\">this</span>.onReject.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    \texecutionFunction(<span class=\"keyword\">this</span>.onResolve, <span class=\"keyword\">this</span>.onReject)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    then(onResolve) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.promiseChain.push(onResolve)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">catch</span>(handleError) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handleError = handleError</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    onResolve(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> storedValue = value</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.promiseChain.forEach(<span class=\"function\">(<span class=\"params\">nextFunction</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                storedValue = nextFunction(storedValue)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.promiseChain = [];</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">this</span>.onReject(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    onReject(error) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handleError(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// test example</span></span><br><span class=\"line\">fakeApiBackend = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">        username: <span class=\"string\">'treyhuffine'</span>,</span><br><span class=\"line\">        favoriteNumber: <span class=\"number\">42</span>,</span><br><span class=\"line\">        profile: <span class=\"string\">'https://gitconnected.com/treyhuffine'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.random() &gt; <span class=\"number\">.05</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            data: user,</span><br><span class=\"line\">            statusCode: <span class=\"number\">200</span></span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> error = &#123;</span><br><span class=\"line\">            statusCode: <span class=\"number\">404</span>,</span><br><span class=\"line\">            message: <span class=\"string\">'Could not find user'</span>,</span><br><span class=\"line\">            error: <span class=\"string\">'Not Found'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> error</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> makeApiCall = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PromiseSimple(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> apiResponse = fakeApiBackend()</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (apiResponse.statusCode &gt;= <span class=\"number\">400</span>) &#123;</span><br><span class=\"line\">                reject(apiResponse)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                resolve(apiResponse.data)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">5000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">makeApiCall()</span><br><span class=\"line\">\t.then(<span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'In the first .then()'</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> user</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t.then(<span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`User <span class=\"subst\">$&#123;user.username&#125;</span>'s favorite number is <span class=\"subst\">$&#123;user.favoriteNumber&#125;</span>`</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> user</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t.then(<span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'The previous .then() told you the favoriteNumber'</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> user.profile</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t.then(<span class=\"function\">(<span class=\"params\">profile</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`The profile URL is <span class=\"subst\">$&#123;profile&#125;</span>`</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'This is the last then()'</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t.catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error.message)</span><br><span class=\"line\">\t&#125;)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://levelup.gitconnected.com/understand-javascript-promises-by-building-a-promise-from-scratch-84c0fd855720\" target=\"_blank\" rel=\"noopener\">原文地址：Learn JavaScript Promises by Building a Promise from Scratch\n</a></p>\n<hr>\n<p>通过自建一个 <code>Promise</code> 逐步了解 <code>Promise</code> 的工作原理</p>\n<p>你以前可能见过类似下方的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">'/user/1'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* Do something with user after the API returns */</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<p><code>.then()</code> 中包裹的代码块在执行之前，会一直等待，直到接收到来自服务器的响应。这就叫做 <code>Promise</code>。但千万不要被这花名和其中的异步代码吓退——一个 <code>Promise</code> 只是一个很普通的旧的 <code>JavaScript</code> 对象，它具有特殊的方法，可以让你同步执行代码(即使有延迟，它也会按顺序执行)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;&#125;) === <span class=\"string\">'object'</span></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>重申一遍(原作者语：我第一次学习 <code>promise</code> 时，我很难把握 <code>promise</code> 的要点)，<code>Promise</code> 只是一个对象。为了保证会等待服务器并在服务器返回响应后执行 <code>.then()</code> 方法链中的代码，你<b>必须</b>返回一个 <code>Promise</code> 对象。这跟某些开箱即用的函数是两码事。下面的例子中，<code>fetch</code> 函数就是这么个函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fetch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        request(<span class=\"function\">(<span class=\"params\">error, apiResponse</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">                reject(error)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            resolve(apiResponse)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述的 <code>fetch()</code> 函数向服务器发送一个 http 请求，但客户端并不知道服务器何时返回结果。所以，<code>JavaScript</code> 会在等待服务器返回结果期间，执行其他无关的代码，一旦客户端接收到服务器返回的响应，它就会通过调用 <code>resolve(apiResponse)</code> 开始执行 <code>.then()</code> 语句中的代码。</p>\n<hr>\n<p>现在让我们仔细看看 <code>Promise</code> 到底是如何做到这一点的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PromiseSimple</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(executionFunction) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.promiseChain = [];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handleError = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolve = <span class=\"keyword\">this</span>.onResolve.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onReject = <span class=\"keyword\">this</span>.onReject.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        executionFunction(<span class=\"keyword\">this</span>.onResolve, <span class=\"keyword\">this</span>.onReject)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    then(onResolve) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.promiseChain.push(onResolve)</span><br><span class=\"line\">    \t</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">catch</span>(handleError) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handleError = handleError</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    onResolve(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> storedValue = value</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.promiseChain.forEach(<span class=\"function\">(<span class=\"params\">nextFunction</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                storedValue = nextFunction(storedValue)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.promiseChain = [];</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">this</span>.onReject(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    onReject(error) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handleError(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：上述版本的 <code>Promise</code> 只是用了学习 <code>Promise</code> 工作原理的，省略了一些更高级的功能，只提炼了最核心的部分</p>\n</blockquote>\n<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h3><p>我将其命名为 <code>PromiseSimple</code> ，防止在 Chrome 控制台运行上述代码时，原生的 <code>Promise</code> 被覆盖。上述版本的 promise 实现有一个构造函数，两个公共方法(与原生的 <code>then()</code> 和 <code>catch()</code> 类似)，两个内置方法： <code>onResolve()</code> 和 <code>onReject()</code></p>\n<ol>\n<li>当你创建一个 promise 时，你会像这样创建： <code>new Promise((resolve, reject) =&gt; {/* ... */})</code>。你会在构造函数中向 promise 传递一个回调函数，我命名为 <code>executionFunction</code>。执行函数会携带 <code>resolve</code> 和 <code>reject</code> ，映射为内置的 <code>onResolve</code> 和 <code>onReject</code> 方法。这些方法都会在 <code>fetch</code> 调用 resolve 或 reject 时被调用。</li>\n</ol>\n<ol start=\"2\">\n<li>构造函数也会创建一个 <code>promiseChain</code> 数组和 <code>handleError</code> 函数。当 promise 后面接了一串 <code>.then(() =&gt; {})</code> 时，它会将每一个函数添加到 <code>promiseChain</code> 中；当用户调用 <code>catch(() =&gt; {})</code> 时，它会将函数分配给内部的 <code>handleError</code>。注意，<code>then()</code> 和 <code>catch</code> 都有 <code>return this</code>，以便可以链式调用 <code>then()</code></li>\n</ol>\n<blockquote>\n<p>注意：对原生的 <code>Promise</code> 而言，它的 <code>then()</code> 和 <code>catch()</code> 函数都会返回一个 <code>new Promise</code>，而上述简版 <code>Promise</code> 只是返回了 <code>this</code>。另外，多个 <code>.catch()</code> 也可以链式调用，不一定要接在 <code>.then()</code> 方法链的末尾</p>\n</blockquote>\n<ol start=\"3\">\n<li>当你的异步代码调用了 <code>resolve(apiResponse)</code>，自建的 promise 对象便会开始执行 <code>onResolve(apiResponse)</code>：迭代整个 <code>promiseChain</code> ，取出队首的方法，传入 <code>storedValue</code> 中最近保存的值并执行，然后用最近执行的结果更新 <code>storedValue</code>。它会按顺序执行 <code>promiseChain</code> 中保存的函数，借此创建同步的 <code>promise</code> 链。</li>\n</ol>\n<ol start=\"4\">\n<li>该循环（上述的迭代）被封装在 <code>try/catch</code> 块中，以便捕获运行时的错误。如果你的异步代码调用了 <code>reject(error)</code> 或者 <code>try/catch</code> 捕获了一个错误，它将被传递给 <code>onReject()</code> 方法，该方法调用作为参数传递给 <code>.catch()</code> 的回调函数。</li>\n</ol>\n<h3 id=\"promiseSimple-with-test-example\"><a href=\"#promiseSimple-with-test-example\" class=\"headerlink\" title=\"promiseSimple with test example\"></a>promiseSimple with test example</h3><h3 id=\"具体的实现及使用\"><a href=\"#具体的实现及使用\" class=\"headerlink\" title=\"具体的实现及使用\"></a>具体的实现及使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PromiseSimple</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(executionFunction) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.promiseChain = [];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handleError = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.onResolve = <span class=\"keyword\">this</span>.onResolve.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.onReject = <span class=\"keyword\">this</span>.onReject.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    \texecutionFunction(<span class=\"keyword\">this</span>.onResolve, <span class=\"keyword\">this</span>.onReject)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    then(onResolve) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.promiseChain.push(onResolve)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">catch</span>(handleError) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handleError = handleError</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    onResolve(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> storedValue = value</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.promiseChain.forEach(<span class=\"function\">(<span class=\"params\">nextFunction</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                storedValue = nextFunction(storedValue)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.promiseChain = [];</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">this</span>.onReject(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    onReject(error) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handleError(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// test example</span></span><br><span class=\"line\">fakeApiBackend = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">        username: <span class=\"string\">'treyhuffine'</span>,</span><br><span class=\"line\">        favoriteNumber: <span class=\"number\">42</span>,</span><br><span class=\"line\">        profile: <span class=\"string\">'https://gitconnected.com/treyhuffine'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.random() &gt; <span class=\"number\">.05</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            data: user,</span><br><span class=\"line\">            statusCode: <span class=\"number\">200</span></span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> error = &#123;</span><br><span class=\"line\">            statusCode: <span class=\"number\">404</span>,</span><br><span class=\"line\">            message: <span class=\"string\">'Could not find user'</span>,</span><br><span class=\"line\">            error: <span class=\"string\">'Not Found'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> error</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> makeApiCall = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PromiseSimple(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> apiResponse = fakeApiBackend()</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (apiResponse.statusCode &gt;= <span class=\"number\">400</span>) &#123;</span><br><span class=\"line\">                reject(apiResponse)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                resolve(apiResponse.data)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">5000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">makeApiCall()</span><br><span class=\"line\">\t.then(<span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'In the first .then()'</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> user</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t.then(<span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`User <span class=\"subst\">$&#123;user.username&#125;</span>'s favorite number is <span class=\"subst\">$&#123;user.favoriteNumber&#125;</span>`</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> user</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t.then(<span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'The previous .then() told you the favoriteNumber'</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> user.profile</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t.then(<span class=\"function\">(<span class=\"params\">profile</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`The profile URL is <span class=\"subst\">$&#123;profile&#125;</span>`</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'This is the last then()'</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t.catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error.message)</span><br><span class=\"line\">\t&#125;)</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}